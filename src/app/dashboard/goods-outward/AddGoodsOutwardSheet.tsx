'use client';

import { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { QRScannerStep, ScannedStockUnit } from './QRScannerStep';
import { OutwardDetailsStep } from './OutwardDetailsStep';
import { createClient, getCurrentUser } from '@/lib/supabase/client';

interface AddGoodsOutwardSheetProps {
	open: boolean;
	onOpenChange: (open: boolean) => void;
	onOutwardAdded?: () => void;
}

interface DetailsFormData {
	dispatchToType: 'partner' | 'warehouse';
	dispatchToId: string;
	linkToType: 'sales_order' | 'job_work' | 'purchase_return' | 'other';
	linkToValue: string;
	outwardDate: string;
	dueDate: string;
	invoiceNumber: string;
	invoiceAmount: string;
	transportDetails: string;
	notes: string;
	documentFile: File | null;
}

type FormStep = 'scanner' | 'details';

export function AddGoodsOutwardSheet({
	open,
	onOpenChange,
	onOutwardAdded,
}: AddGoodsOutwardSheetProps) {
	const [currentStep, setCurrentStep] = useState<FormStep>('scanner');
	const [scannedUnits, setScannedUnits] = useState<ScannedStockUnit[]>([]);
	const [saving, setSaving] = useState(false);
	const [saveError, setSaveError] = useState<string | null>(null);

	const supabase = createClient();

	// Details form state
	const [detailsFormData, setDetailsFormData] = useState<DetailsFormData>({
		dispatchToType: 'partner',
		dispatchToId: '',
		linkToType: 'sales_order',
		linkToValue: '',
		outwardDate: '',
		dueDate: '',
		invoiceNumber: '',
		invoiceAmount: '',
		transportDetails: '',
		notes: '',
		documentFile: null,
	});

	// Check if user can proceed to step 2
	const canProceed = useMemo(() =>
		scannedUnits.length > 0,
		[scannedUnits]
	);

	// Check if form is valid for submission
	const canSubmit = useMemo(() =>
		detailsFormData.dispatchToId !== '' &&
		scannedUnits.length > 0,
		[detailsFormData.dispatchToId, scannedUnits]
	);

	const handleNext = () => {
		if (canProceed) {
			setCurrentStep('details');
		}
	};

	const handleBack = () => {
		setCurrentStep('scanner');
	};

	const handleSubmit = async (e?: React.FormEvent) => {
		e?.preventDefault();
		if (!canSubmit) return;
		setSaving(true);
		setSaveError(null);

		try {
			const currentUser = await getCurrentUser();
			if (!currentUser || !currentUser.company_id) {
				throw new Error('User not found');
			}

			// Get the first warehouse for now (should be selected in details form later)
			const { data: warehouse } = await supabase
				.from('warehouses')
				.select('id')
				.eq('company_id', currentUser.company_id)
				.limit(1)
				.single();

			if (!warehouse) {
				throw new Error('No warehouse found');
			}

			// Map linkToType to outward_type
			const outwardTypeMap: Record<typeof detailsFormData.linkToType, string> = {
				'sales_order': 'sales',
				'job_work': 'job_work',
				'purchase_return': 'purchase_return',
				'other': 'other',
			};

			// Prepare outward data
			const outwardData = {
				company_id: currentUser.company_id,
				warehouse_id: warehouse.id,
				outward_number: `GO-${Date.now()}`, // Will be auto-generated by trigger
				outward_type: outwardTypeMap[detailsFormData.linkToType],

				// Conditional partner/warehouse
				partner_id: detailsFormData.dispatchToType === 'partner' ? detailsFormData.dispatchToId : null,
				to_warehouse_id: detailsFormData.dispatchToType === 'warehouse' ? detailsFormData.dispatchToId : null,

				// Conditional linking
				sales_order_id: detailsFormData.linkToType === 'sales_order' ? detailsFormData.linkToValue || null : null,
				job_work_id: detailsFormData.linkToType === 'job_work' ? detailsFormData.linkToValue || null : null,
				other_reason: detailsFormData.linkToType === 'other' ? detailsFormData.linkToValue || null : null,

				// Dates and details
				outward_date: detailsFormData.outwardDate || null,
				due_date: detailsFormData.dueDate || null,
				invoice_number: detailsFormData.invoiceNumber || null,
				invoice_amount: detailsFormData.invoiceAmount ? parseFloat(detailsFormData.invoiceAmount) : null,
				transport_details: detailsFormData.transportDetails || null,
				notes: detailsFormData.notes || null,
				created_by: currentUser.id,
			};

			// Prepare stock unit items from scannedUnits
			const stockUnitItems = scannedUnits.map(item => ({
				stock_unit_id: item.stockUnit.id,
				quantity: item.quantity,
			}));

			// Call RPC function to create outward with items atomically
			const { data: _result, error: rpcError } = await supabase.rpc('create_goods_outward_with_items', {
				p_outward_data: outwardData,
				p_stock_unit_items: stockUnitItems,
			});

			if (rpcError) throw rpcError;

			// Success! Close sheet and notify parent
			handleCancel();
			if (onOutwardAdded) {
				onOutwardAdded();
			}
		} catch (error) {
			console.error('Error creating goods outward:', error);
			setSaveError(error instanceof Error ? error.message : 'Failed to create goods outward');
		} finally {
			setSaving(false);
		}
	};

	const handleCancel = () => {
		setCurrentStep('scanner');
		setScannedUnits([]);
		setDetailsFormData({
			dispatchToType: 'partner',
			dispatchToId: '',
			linkToType: 'sales_order',
			linkToValue: '',
			outwardDate: '',
			dueDate: '',
			invoiceNumber: '',
			invoiceAmount: '',
			transportDetails: '',
			notes: '',
			documentFile: null,
		});
		setSaveError(null);
		onOpenChange(false);
	};

	return (
		<Sheet open={open} onOpenChange={onOpenChange}>
			<SheetContent>
				{/* Header */}
				<SheetHeader>
					<SheetTitle>Create goods outward</SheetTitle>
					<SheetDescription>
						Step {currentStep === 'scanner' ? '1' : '2'} of 2
					</SheetDescription>
				</SheetHeader>

				{/* Progress bar */}
				<div className="h-1 bg-gray-200">
					<div
						className="h-full bg-primary-500 transition-all duration-300"
						style={{ width: currentStep === 'scanner' ? '50%' : '100%' }}
					/>
				</div>

				{/* Form Content - Scrollable */}
				<form onSubmit={handleSubmit} className="flex flex-col h-full overflow-hidden">
					{currentStep === 'scanner' ? (
						open && (
							<QRScannerStep
								scannedUnits={scannedUnits}
								onScannedUnitsChange={setScannedUnits}
							/>
						)
					) : (
						<OutwardDetailsStep
							formData={detailsFormData}
							onChange={(updates) => setDetailsFormData(prev => ({ ...prev, ...updates }))}
						/>
					)}

					{/* Footer */}
					<SheetFooter>
						{saveError && (
							<p className="text-sm text-red-600 text-center">{saveError}</p>
						)}
						<div className="flex gap-3">
							{currentStep === 'scanner' ? (
								<>
									<Button variant="outline" onClick={handleCancel} disabled={saving} className="flex-1" >
										Cancel
									</Button>
									<Button onClick={handleNext} disabled={!canProceed || saving} className="flex-1" >
										Next
									</Button>
								</>
							) : (
								<>
									<Button variant="outline" onClick={handleBack} disabled={saving} className="flex-1" >
										Back
									</Button>
									<Button onClick={handleSubmit} disabled={!canSubmit || saving} className="flex-1" >
										{saving ? 'Saving...' : 'Submit'}
									</Button>
								</>
							)}
						</div>
					</SheetFooter>
				</form>
			</SheetContent>
		</Sheet>
	);
}
